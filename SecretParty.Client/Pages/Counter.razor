@page "/"
@rendermode InteractiveAuto
@using Blazr.RenderState
@using AzureMapsControl.Components.Map
@using AzureMapsControl.Components.Markers
@using AzureMapsControl.Components.Traffic
@using Flurl.Http
@using SecretParty.Model
@using AzureMapsControl.Components.Atlas
@using AzureMapsControl.Components.Popups
@inject IBlazrRenderStateService RenderState
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation


<PageTitle>Secret Party Club</PageTitle>

@if (RenderState.IsPreRender)
{
	<Splash />
	return;
}

<AzureMap Id="map"
          CameraOptions="new CameraOptions { Zoom = 10 }"
		  StyleOptions="new StyleOptions { ShowLogo = false, ShowFeedbackLink = false, AutoResize = true, Style = MapStyle.GrayscaleDark }"
		  EventActivationFlags="MapEventActivationFlags.None().Enable(MapEventType.Ready)"
		  OnReady="OnMapReadyAsync" />

@code {
	private (double, double) Coordinates;
	private bool Init;

	protected string CurrentLatitude => 
		Coordinates.Item1.ToString("F2");
	protected string CurrentLongitude => 
		Coordinates.Item2.ToString("F2");

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();
	}

	protected async Task LoadPins(Map map)
	{
		var parties = await $"{Navigation.BaseUri}api/SecretParty/getTodaysParties".GetJsonAsync<IList<Party>>();

		foreach (var party in parties)
		{
			await map.AddHtmlMarkersAsync
			(
				new HtmlMarker(
					new HtmlMarkerOptions
					{
						Position = new Position(0, 0),
						Draggable = false,
						Popup = new HtmlMarkerPopup(new PopupOptions {
							Content = "<div style=\"padding:10px;color:white\">Hello World</div>",
							Position = new Position(0, 0),
							FillColor = "rgba(0,0,0,0.8)",
							CloseButton = false,
							OpenOnAdd = true
						})
					})
			);
		}

		StateHasChanged();
	}

	public async Task OnMapReadyAsync(MapEventArgs eventArgs)
	{
		//CurrentPositionResult = await GeolocationService.GetCurrentPosition(options: new PositionOptions { EnableHighAccuracy = false });
		Coordinates = await GetLocation();
		await eventArgs.Map.SetCameraOptionsAsync(
			options => options.Center =
				new AzureMapsControl.Components.Atlas.Position
					(Convert.ToDouble(CurrentLongitude), Convert.ToDouble(CurrentLatitude)));

		LoadPins(eventArgs.Map);
	}
	private async Task<(double, double)> GetLocation()
	{
		try
		{
			var location = (await JsRuntime.InvokeAsync<string>("getCoords"))?.Split(",");
			return (double.Parse(location.First()), double.Parse(location.Last()));
		}
		catch
		{
			return (40.730610, -73.935242); //new york
		}
	}
}
