@page "/chat"
@rendermode InteractiveServer

<PageTitle>SecretParty Chat</PageTitle>
@using BootstrapBlazor.Components
@using Flurl.Http
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Mvc
@using SecretParty.Model
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject AiProxy AiProxy
@inject NavigationManager NavigationManager;
@inject ChatService ChatService

@if (_messages == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="chatcontainer" id="chatcontainer">

		@if (sending)
		{
			<div class="row">
				<div class="col col-md-auto translateBetterpod ischat">
					<img src="img/say_aiv.webp" class="say_aiv" />
					<div class="chatbubble">
						<p class="typing">
							<span></span>
							<span></span>
							<span></span>
						</p>
					</div>
				</div>
				<div class="col">&nbsp;</div>
			</div>
		}
		@if (!string.IsNullOrWhiteSpace(writeOut))
		{
			<div class="row">
				<div class="col col-md-auto translateBetterpod ischat">
					<img src="img/say_aiv.webp" class="say_aiv" />
					<div class="chatbubble">@((MarkupString)writeOut.Replace("\n", "<br/>"))</div>
				</div>
				<div class="col">&nbsp;</div>
			</div>
		}
		@foreach (var request in _messages.Values.Reverse())
		{
			<div class="row">
				@if (request.IsHuman)
				{
					<div class="col">&nbsp;</div>
					<div class="col col-md-auto translateBetterpod person @(request.IsChat ? "ischat" : "notchat")">
						<img src="img/say_person.webp" class="say_person" />
						<div class="chatbubble">@((MarkupString)request.Text.Replace("\n", "<br/>"))</div>
					</div>
				}
				else
				{
					<div class="col col-md-auto translateBetterpod @(request.IsChat ? "ischat" : "notchat")">
						<img src="img/say_aiv.webp" class="say_aiv" />
						<div class="chatbubble">
							@((MarkupString)request.Text.Replace("\n", "<br/>"))
							@if (!string.IsNullOrWhiteSpace(request.img))
							{
								<a href="@request.img" target="_blank">
									<img src="@request.img" alt="@request.Text" />
								</a>
							}
						</div>
					</div>
					<div class="col">&nbsp;</div>
				}
			</div>
		}
	</div>
	<div class="chatbox row">
		<div class="col col-12">
			<img src="img/send.webp" @onclick="SendMessage" class="sendimage @(sending ? "disabled" : String.Empty)" alt="send chat to AI" />
			<div class="textcontainer">
				<textarea placeholder="Chat with Lisa M" rows="1" @bind="messageToSend"></textarea>
			</div>
		</div>
	</div>
}

<Modal @ref="modal">
	<ModalDialog Title="Note" ShowCloseButton="false">

		<BodyTemplate>
			<div class="row">
				@if (_chat?.Participant2Id != null)
				{

					<h4>Start mingling</h4>
					<p>
						You are chatting with Lisa L, the goal is to guess whether she is an AI or real human. If you guess correctly you get one point.
						<br />
						But do it quickly, if she is a human and guesses correctly she gets the point and you lose.

					</p>

				}
				else
				{
					<h4>Chill</h4>
					<p>
						Seems everyone's busy and no-one to talk to. Sounds like its time for a drink!
					</p>
				}
			</div>
		</BodyTemplate>
		<FooterTemplate>

			@if (_busy)
			{
				<button disabled="disabled" class="btn-secondary">Please wait...</button>
			}
			else if (_chat?.Participant2Id != null)
			{

				<button value="Subscribe now" @onclick="() => modal.Close()">Chat</button>
			}
			else
			{
				<button class="btnPrimary" @onclick="Retry">Try again</button>

			}
		</FooterTemplate>
	</ModalDialog>

</Modal>


@code {
	[Parameter]
	[SupplyParameterFromQuery(Name = "party")]
	public string? PartyId { get; set; }

	private Modal modal;

	public bool _scrollDone;

	private string? messageToSend;

	private string writeOut;

	private record Message(string Text, DateTimeOffset Timestamp, string Id, bool IsHuman, bool IsChat, bool IsError = false, string? img = null)
	{
	}

	private SortedList<DateTimeOffset, Message> _messages;

	private bool _init;
	private bool _busy;

	private async Task Retry()
	{
		_busy = true;
		try
		{
			if (_chat?.Participant2Id != null)
			{
				return;
			}
			_chat = await ChatService.StartChat(PartyId!);
		}
		finally
		{
			_busy = false;
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		if (_init)
		{
			return;
		}
		_chat = await ChatService.StartChat(PartyId!);

		_init = true;

		_messages = new SortedList<DateTimeOffset, Message>();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			Task.Run(async () =>
			{
				await Task.Delay(200);
				await modal.Show();
			});
		}
	}


	private bool sending;
	private ChatData _chat;

	private async Task SendMessage()
	{
		if (sending)
		{
			return;
		}
		sending = true;
		try
		{
			if (string.IsNullOrWhiteSpace(messageToSend))
			{
				return;
			}


			var newChat = messageToSend;

			_messages.Add(DateTimeOffset.Now, new Message(messageToSend ?? string.Empty, DateTimeOffset.Now, Guid.NewGuid().ToString(), true, true));

			messageToSend = null;

			//input chat
			var pastChatsString = string.Join("\r\n", _messages.Where(x => x.Value.IsChat).TakeLast(20).Select(p => $"{(p.Value.IsHuman ? "friend" : "me")}: {p.Value.Text}"));

			StateHasChanged();
			await JsRuntime.InvokeVoidAsync("ScrollBottom");
			var isPrompt = false;
			var prompt = string.Empty;
			int i = 10;
			var aiMessageRecords = new List<AiMessageRecord>();

			aiMessageRecords.Add(new(AiMessageRole.System, @"You are active like a person called Lisa. You and the user named Alan are both at an underground party."));

			AddTrainingData(aiMessageRecords);

			aiMessageRecords.Add(new(AiMessageRole.User, @$"{newChat}"));

			writeOut = await AiProxy.ThinkStream(aiMessageRecords);

			_messages.Add(DateTimeOffset.Now, new Message(writeOut ?? string.Empty, DateTimeOffset.Now, Guid.NewGuid().ToString(), false, true));

			writeOut = null;
			Task.Run(async () =>
			{
				await Task.Delay(200);
				await JsRuntime.InvokeVoidAsync("ScrollBottom");
			});

		}
		catch (Exception ex)
		{
			_messages.Add(DateTimeOffset.Now, new Message(ex.Message, DateTimeOffset.Now, Guid.NewGuid().ToString(), false, false, true));
		}
		finally
		{
			sending = false;
			writeOut = null;
			StateHasChanged();
		}

		void AddTrainingData(List<AiMessageRecord> aiMessageRecords)
		{
			foreach (var message in _messages)
			{
				aiMessageRecords.Add(new AiMessageRecord(message.Value.IsHuman ? AiMessageRole.User : AiMessageRole.Assistant, message.Value.Text));
			}
		}
	}

}
